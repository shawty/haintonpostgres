<RadzenTemplateForm TItem="IdentityData" Data="@ExistingItem" Submit="@((IdentityData newItem) => HandleSubmit(newItem))">

    <div class="row rowGapBottom">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Primary Key"/>
        </div>
        <div class="col-md-8">
            <RadzenNumeric TValue="int" @bind-Value="@ExistingItem.Pkid" style="width: 100%;" Name="Pkid" ReadOnly="true"/>
        </div>
    </div>

    <div class="row rowGapBottom">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Text Item"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="ExistingItem.TextVal" style="width: 100%;" Name="TextVal"/>
            <RadzenRequiredValidator Component="TextVal" Text="Text Value is required" />
        </div>
    </div>

    <div class="row rowGapBottom justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save"/>
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel"/>
        </div>
    </div>

</RadzenTemplateForm>

@code {

    [Inject]
    private DataContext _db { get; set; }

    [Inject]
    private DialogService _dialogs { get; set; }

    [Parameter]
    public IdentityData ExistingItem { get; set; }

    private void HandleSubmit(IdentityData existingItem)
    {
        _db.IdentityData.Update(existingItem);
        _db.SaveChanges();
        _dialogs.Close(true);
    }

    private void Cancel()
    {
        _dialogs.Close(false);
    }
    
}